#include<iostream>
using namespace std;

template<typename DT>
class Queue
{
private:
	struct Nod
	{
		DT data;
		int priority;
		Nod* next;
	};
	Nod* head;
	Nod* tail;
public:
	Queue()
	{
		head = tail = nullptr;

	}
	~Queue()
	{
		while (head != nullptr)
		{
			Nod* temp=head;
			head = head->next;
			delete temp;
		}
	}
	bool empty()
	{
		return head == nullptr;
	}
	DT front()
	{
		return head->data;
	}
	void pop()
	{
		Nod* temp=head;
		head = head->next;
		delete temp;
	}
	void push(const DT& element, int priority)
	{
		Nod* nod_nou = new Nod();
		nod_nou->next = nullptr;
		nod_nou->priority = priority;
		nod_nou->data = element;

		if (empty())
		{
			head = nod_nou;
			tail = head;
			return;
		}
		if (priority > head->priority)
		{
			nod_nou->next = head;
			head = nod_nou;
			return;
		}
		Nod* temp = head;
		while (temp->next!=nullptr&& priority<=temp->next->priority )
		{
			temp = temp->next;
		}
		nod_nou->next = temp->next;
		temp->next = nod_nou;
	}
};
int main() {
	int n, x;
	cin >>n;
	Queue<char> Q;
	for (int i = 0; i < n; i++) {
		char c; int p;
		cin >> c >> p;
		Q.push(c, p);
	}
	char val;
	for (int i = 0; i < n; i++) {
		val = Q.front();
		Q.pop();
		switch (val) {
		case'a':
		case'e':
		case'i':
		case'o':
		case'u':
			cout << (char)toupper(val);
			break;
		default:
			cout << val;
		}
	}

}
